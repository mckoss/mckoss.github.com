<HTML>
<HEAD>
<STYLE>
TABLE {
border-collapse:collapse;
width: 50%;
}

TD {
border:1 solid black;
text-align:center;
}

TH {
background-color: black;
color: white;
border: 1 solid white;
text-align:center;
}
</STYLE>

<SCRIPT>
var mpOpcodes;

//---------------------------------------------------
// OpCode
//----------------------------------------------mck--
function OpCode(op, cb, stDesc, stExpr)
{
	mpOpcodes[op] = this;

	this.op = op;
	this.cb = cb;
	this.stDesc = stDesc;
	this.stExpr = stExpr;
}

function InitializeOpcodes()
{
	mpOpcodes = new Array;
	new OpCode(0, 1, "Halt", "fRet = false;");
	new OpCode(1, 1, "NOP", "");
	new OpCode(2, 2, "Jump (relative)", "prog.iop += prog.rgop[prog.iop+1];");
	new OpCode(3, 1, "A++", "mach.A++;");
	new OpCode(4, 1, "A--", "mach.A--;");
	new OpCode(5, 1, "I++", "mach.I++;");
	new OpCode(6, 1, "I--", "mach.I--;");
	new OpCode(7, 1, "A += Array[i]",
		"var w = mach.rgw[mach.I];" +
		"if (w == null)" +
		"  fRet = false;" +
		" else" +
		"  mach.A += w;");
	new OpCode(8, 1, "A=0", "mach.A = 0;");
	new OpCode(9, 1, "I=0", "mach.I = 0;");
	new OpCode(10, 1, "A=B", "mach.A = mach.B;");
	new OpCode(11, 1, "B=A", "mach.B = mach.A;");
	new OpCode(12, 4, "A ~ B", "prog.TestW(mach.A - mach.B);");
	new OpCode(13, 4, "Test I", "prog.TestW(mach.I);");
	new OpCode(14, 4, "Test A", "prog.TestW(mach.A);");
	new OpCode(15, 4, "Test B", "prog.TestW(mach.B);");
	new OpCode(16, 4, "I ~ N", "prog.TestW(mach.I - mach.rgw.length);");
}

function StDisplayOpCodes()
{
	var st = "";
	var iop;

	st += "<table><tr><th>OpCode (size)</th><th>Description</th><th>Code</th></tr>";
	for (iop in mpOpcodes)
		{
		var op = mpOpcodes[iop];
		st += "<tr><td>" + op.op + "(" + op.cb + ")</td><td>" + op.stDesc + "</td><td>" +
			op.stExpr + "</td></tr>";
		}
	st += "</table>";
	return st;
}

OpCode.prototype.Exec = OpExec;
function OpExec(prog)
{
	var fRet = true;

	if (prog.iop + this.cb > prog.rgop.length)
		return false;

	var mach = prog.mach;

	eval(this.stExpr);
	
	prog.iop += this.cb;
	return fRet;
}

//---------------------------------------------------
// Machine
//----------------------------------------------mck--

function Machine()
{
	this.rgw = new Array(20);
	this.NewGeneration();
	this.Reset();
}

Machine.prototype.Reset = MachReset;
function MachReset()
{
	this.I = 0;
	this.A = 0;
	this.B = 0;
}

Machine.prototype.Score = MachScore;
function MachScore()
{
	if (this.A > this.MaxSum)
		return 0;
	return this.A;
}

Machine.prototype.NewGeneration = MachNewGeneration;
function MachNewGeneration()
{
	var iw;
	
	for (iw = 0; iw < this.rgw.length; iw++)
		this.rgw[iw] = Pick(256)-128;

	this.MaxSum = 0;
	var sumT = 0;
	for (iw = 0; iw < this.rgw.length; iw++)
		{
		sumT += this.rgw[iw];
		if (sumT < 0)
			sumT = 0;
		else if (sumT > this.MaxSum)
			this.MaxSum = sumT;
		}
}

//---------------------------------------------------
// Program
//----------------------------------------------mck--
function Program()
{
	this.rgop = new Array;
}

Program.prototype.Clone = ProgClone;
function ProgClone()
{
	var clone = new Program;

	for (iop = 0; iop < this.rgop.length; iop++)
		clone.rgop[iop] = this.rgop[iop];

	clone.mach = this.mach;

	return clone;
}

function Pick(c)
{
	return Math.floor(Math.random() * c);
}

Program.prototype.Mutate = ProgMutate;
function ProgMutate()
{
	var iop = Pick(this.rgop.length);
	var mt = Pick(4);
	switch (mt)
		{
	case 0:
		this.rgop[iop]++;
		break;
	case 1:
		this.rgop[iop]--;
		break;
	case 2:
		var rgNew = new Array;
		var rgOld = this.rgop;
		rgNew[0] = Pick(mpOpcodes.length);
		this.rgop = rgOld.slice(0, iop).concat(rgNew);
		this.rgop = this.rgop.concat(rgOld.slice(iop));
		break
	case 3:
		var rgOld = this.rgop;
		this.rgop = rgOld.slice(0, iop).concat(rgOld.slice(iop+1));
		break;
		}
	document.write("<br>Mutation(" + mt + "@" + iop +"): [" + this.rgop.join(", ") + "]<br>");
}

Program.copMax = 500;

Program.prototype.Attach = ProgAttach;
function ProgAttach(mach)
{
	this.mach = mach;
}

Program.prototype.Run = ProgRun;
function ProgRun()
{
	var cop;
	this.iop = 0;
	mach.Reset();

	document.write("<br>Array[" + this.mach.rgw.join(", ") + "] =>" + this.mach.MaxSum);

	document.write("<table><tr><th colspan=6>Pre</th><th colspan=4>Post</th></tr><tr>" +
		"<th>COP</th>" +
		"<th>IOP</th><th>I</th><th>A</th><th>B</th><th>OP</th>" +
		"<th>IOP</th><th>I</th><th>A</th><th>B</th></tr>");
	
	for (cop = 0; cop < Program.copMax; cop++)
		{
		document.write("<tr><td>" + cop + "</td>" + this.StTrace() + "<td><b>" + this.rgop[this.iop] + "</b></td>");
		var f = this.ExecOp();
		document.write(this.StTrace() + "</tr>");
		if (!f)
			break;
		}

	document.write("</table>");
	this.score = this.mach.Score() - cop/10;

	document.write("<br>Score: " + this.score + "/" + this.mach.MaxSum);
}

Program.prototype.StTrace = ProgStTrace;
function ProgStTrace()
{
	var st = "";

	st += "<td>" + this.iop + "</td><td>" +
		this.mach.I + "</td><td>" + this.mach.A + "</td><td>" + this.mach.B + "</td>";

	return st;
}

Program.prototype.ExecOp = ProgExecOp;
function ProgExecOp()
{
	var op = mpOpcodes[this.rgop[this.iop]];
	if (op == null)
		return false;

	return op.Exec(this);
}

Program.prototype.JumpRel = ProgJumpRel;
function ProgJumpRel(diop)
{
	this.iop += this.rgop[this.iop + diop];
}

Program.prototype.TestW = ProgTestW;
function ProgTestW(w)
{
	if (w < 0)
		this.JumpRel(1);
	else if (w == 0)
		this.JumpRel(2);
	else
		this.JumpRel(3);
}

</SCRIPT>

</HEAD>

<BODY>
<h1>Evolution Program</h1>
This page executes an evolutionary programming simulator.  The purpose is to evolve
programs that can solve the max sum subarray problem.  Each trial program is given
a fixed budget of CPU cycles to try to solve the max-sum subarray problem for a
given array.  Those programs that come closest to the actual maxsum (without
going over) are given the highest score.
<p>
Programs are also given bonus points for executing in the fewest number of CPU
cycles (if they HALT before their CPU budget has been consumed).
<p>
To simplify the programming model, I've developed a virtual machine that is
especially suited to the Max-Sum-Subarray problem.
<p>
These are the opcodes that are available:

<SCRIPT>
InitializeOpcodes();
document.write(StDisplayOpCodes());
</SCRIPT>
<hr>
<SCRIPT>
var mach = new Machine;
var prog = new Program;
prog.rgop = new Array(7, 12, 1, 1, 0, 11, 14, 0, 0, 1, 8, 5, 16, -16, 0, 0, 10, 0);
document.write("Program: [" + prog.rgop.join(", ") + "]<br>");
prog.Attach(mach);
prog.Run();

//var prog2 = prog.Clone();
//prog2.Run();

prog.Mutate();
prog.Run();
</SCRIPT>

</BODY>
</HTML>

